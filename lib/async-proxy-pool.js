// Generated by CoffeeScript 1.9.1
(function() {
  var AsyncPool, AsyncProxyPool, Promise,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Promise = require('bluebird');

  AsyncPool = require('async-pool');

  AsyncProxyPool = (function(superClass) {
    extend(AsyncProxyPool, superClass);

    function AsyncProxyPool(resources, methods, dataAttributes) {
      var Proxy, attr, i, j, len, len1, method, ref, self;
      if (dataAttributes == null) {
        dataAttributes = [];
      }
      AsyncProxyPool.__super__.constructor.call(this, resources);
      this._Proxy = Proxy = (function() {
        function Proxy() {}

        return Proxy;

      })();
      self = this;
      ref = methods != null ? methods : [];
      for (i = 0, len = ref.length; i < len; i++) {
        method = ref[i];
        Proxy.prototype[method] = function() {
          var args;
          args = arguments;
          return Promise.using(self.use(), function(obj) {
            return obj[method].apply(obj, args);
          });
        };
      }
      for (j = 0, len1 = dataAttributes.length; j < len1; j++) {
        attr = dataAttributes[j];
        Proxy.defineProperty({
          get: function() {
            return Promise.using(self.use(), function(obj) {
              return obj[attr];
            });
          }
        });
      }
    }

    AsyncProxyPool.prototype.share = function() {
      var p;
      this._checkCloseOnUse();
      p = Promise.resolve(new this._Proxy());
      return p.disposer(function() {});
    };

    return AsyncProxyPool;

  })(AsyncPool);

  module.exports = AsyncProxyPool;

}).call(this);
